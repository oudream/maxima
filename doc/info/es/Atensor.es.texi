@c English version 2011-03-14
@menu
* Introducción a atensor::
* Funciones y variables para atensor::
@end menu

@node Introducción a atensor, Funciones y variables para atensor, atensor, atensor
@section Introducción a atensor

El paquete @code{atensor} contiene funciones para la manipulación algebraica de tensores. Para hacer uso de @code{atensor} es necesario cargarlo en memoria haciendo @code{load(atensor)}, seguido de una llamada a la función  @code{init_atensor}.

La parte más importante de @code{atensor} es una batería de reglas de simplificación para el producto no conmutativo ("@code{.}"). El paquete @code{atensor} reconoce algunos tipos de álgebras; las correspondientes reglas de simplificación se activan tan pronto como se hace una llamada a la función @code{init_atensor}.

Las capacidades de @code{atensor} se pueden demostrar definiendo el álgebra de cuaterniones como un álgebra de Clifford Cl(0,2) con una base de dos vectores. Las tres unidades imaginarias son los dos vectores de la base junto con su producto:

@example
    i = v     j = v     k = v  . v
         1         2         1    2
@end example

Aunque el paquete @code{atensor} incluye su propia definición para el álgebra de cuaterniones, no se utiliza en el siguiente ejemplo, en el cual se construye la tabla de multiplicación como una matriz:

@example

(%i1) load(atensor);
(%o1)       /share/tensor/atensor.mac
(%i2) init_atensor(clifford,0,0,2);
(%o2)                                done
(%i3) atensimp(v[1].v[1]);
(%o3)                                 - 1
(%i4) atensimp((v[1].v[2]).(v[1].v[2]));
(%o4)                                 - 1
(%i5) q:zeromatrix(4,4);
                                [ 0  0  0  0 ]
                                [            ]
                                [ 0  0  0  0 ]
(%o5)                           [            ]
                                [ 0  0  0  0 ]
                                [            ]
                                [ 0  0  0  0 ]
(%i6) q[1,1]:1;
(%o6)                                  1
(%i7) for i thru adim do q[1,i+1]:q[i+1,1]:v[i];
(%o7)                                done
(%i8) q[1,4]:q[4,1]:v[1].v[2];
(%o8)                               v  . v
                                     1    2
(%i9) for i from 2 thru 4 do for j from 2 thru 4 do
      q[i,j]:atensimp(q[i,1].q[1,j]);
(%o9)                                done
(%i10) q;
@group
                   [    1        v         v      v  . v  ]
                   [              1         2      1    2 ]
                   [                                      ]
                   [   v         - 1     v  . v    - v    ]
                   [    1                 1    2      2   ]
(%o10)             [                                      ]
                   [   v      - v  . v     - 1      v     ]
                   [    2        1    2              1    ]
                   [                                      ]
                   [ v  . v      v        - v       - 1   ]
                   [  1    2      2          1            ]
@end group
@end example

El paquete @code{atensor} reconoce como vectores de la base símbolos indexados, donde el símbolo es el almacenado en  @code{asymbol} y el índice va desde 1 hasta @code{adim}. Para símbolos indexados, y sólo para ellos, se evalúan las formas bilineales @code{sf}, @code{af} y @code{av}. La evaluación sustituye el valor de @code{aform[i,j]} en lugar de @code{fun(v[i],v[j])}, donde @code{v} representa el valor de @code{asymbol} y @code{fun} es  @code{af} o @code{sf}; o sustituye @code{v[aform[i,j]]} en lugar de @code{av(v[i],v[j])}.

Huelga decir que las funciones @code{sf}, @code{af} y @code{av} pueden volver a definirse.

Cuando se carga el paquete @code{atensor} se hacen las siguientes asignaciones de variables:

@example
dotscrules:true;
dotdistrib:true;
dotexptsimp:false;
@end example

Si se quiere experimentar con una álgebra no asociativa, también se puede igualar la variable  @code{dotassoc} a @code{false}. En tal caso, sin embargo, @code{atensimp} no será siempre capaz de realizar las simplificaciones deseadas.


@c end concepts atensor
@node Funciones y variables para atensor,  , Introducción a atensor, atensor

@section Funciones y variables para atensor

@deffn {Función} init_atensor (@var{alg_type}, @var{opt_dims})
@deffnx {Función} init_atensor (@var{alg_type})

Inicializa el paquete @code{atensor} con el tipo de álgebra especificado, @var{alg_type}, que puede ser una de las siguientes:

@code{universal}: El álgebra universal no tiene reglas de conmutación.

@code{grassmann}: El álgebra de Grassman se define mediante la relación de conmutación @code{u.v+v.u=0}.

@code{clifford}: El álgebra de Clifford se define mediante la regla de conmutación  @code{u.v+v.u=-2*sf(u,v)} donde  @code{sf} es una función escalar simétrica. Para esta álgebra,  @var{opt_dims} puede contener hasta tres enteros no negativos, que representan el número de dimensiones positivas, degeneradas y negativas, respectivamente, de esta álgebra. Si se suministran los valores de @var{opt_dims}, @code{atensor} configurará los valores de @code{adim} y @code{aform} de forma apropiada. En otro caso, @code{adim} tomará por defecto el valor 0 y @code{aform} no se definirá.

@code{symmetric}: El álgebra simétrica se define mediante la regla de conmutación @code{u.v-v.u=0}.

@code{symplectic}: El álgebra simpléctica se define mediante la regla de conmutación @code{u.v-v.u=2*af(u,v)}, donde @code{af} es una función escalar antisimétrica. Para el álgebra simpléctica, @var{opt_dims} puede contener hasta dos enteros no negativos, que representan las dimensiones no degeneradas y degeneradas, respectivamente. Si se suministran los valores de @var{opt_dims}, @code{atensor} configurará los valores de @code{adim} y @code{aform} de forma apropiada. En otro caso, @code{adim} tomará por defecto el valor 0 y @code{aform} no se definirá.

@code{lie_envelop}: El álgebra de la envolvente de Lie se define mediante la regla de conmutación @code{u.v-v.u=2*av(u,v)}, donde @code{av} es una función antisimétrica.

La función @code{init_atensor} también reconoce algunos tipos de álgebras predefinidas:

@code{complex} implementa el álgebra de números complejos como un álgebra de Clifford Cl(0,1). La llamada  @code{init_atensor(complex)} equivale a @code{init_atensor(clifford,0,0,1)}.

@code{quaternion} implementa el álgebra de cuaterniones. La llamada @code{init_atensor(quaternion)} equivale a
@code{init_atensor(clifford,0,0,2)}.

@code{pauli} implementa el álgebra de Pauli como un álgebra de Clifford Cl(3,0). La llamada @code{init_atensor(pauli)} equivale a @code{init_atensor(clifford,3)}.

@code{dirac} implementa el álgebra de Dirac como un álgebra de Clifford Cl(3,1). La llamada @code{init_atensor(dirac)} equivale a @code{init_atensor(clifford,3,0,1)}.

@end deffn


@deffn {Función} atensimp (@var{expr})

Simplifica la expresión algebraica de un tensor  @var{expr} de acuerdo con las reglas configuradas mediante una llamada a  @code{init_atensor}. La simplificación incluye la aplicación recursiva de las reglas de conmutación y llamadas a @code{sf}, @code{af} y @code{av} siempre que sea posible. Se utiliza un algoritmo que asegure que la función termina siempre, incluso en el caso de expresiones complejas.

@end deffn

@deffn {Función} alg_type

Tipo de álgebra. Valores válidos son @code{universal}, @code{grassmann},
@code{clifford}, @code{symmetric}, @code{symplectic} y @code{lie_envelop}.

@end deffn

@defvr {Variable} adim
Valor por defecto: 0

La dimensión del álgebra. El paquete @code{atensor} utiliza el valor de @code{adim} para determinar si un objeto indexado es un vector válido para la base. Véase @code{abasep}.

@end defvr

@defvr {Variable} aform
Valor por defecto: @code{ident(3)}

Valores por defecto para las formas bilineales  @code{sf}, @code{af} y @code{av}. El valor por defecto es la matriz identidad @code{ident(3)}.

@end defvr

@defvr {Variable} asymbol
Valor por defecto: @code{v}

Símbolo para los vectores base.

@end defvr

@deffn {Función} sf (@var{u}, @var{v})

Una función escalar simétrica que se utiliza en relaciones de conmutación. La implementación por defecto analiza si los dos argumentos son vectores base mediante  @code{abasep} y en tal caso sustituye el valor correspondiente de la matriz  @code{aform}.

@end deffn

@deffn {Función} af (@var{u}, @var{v})

Una función escalar antisimétrica que se utiliza en relaciones de conmutación. La implementación por defecto analiza si los dos argumentos son vectores base mediante  @code{abasep} y en tal caso sustituye el valor correspondiente de la matriz  @code{aform}.

@end deffn

@deffn {Función} av (@var{u}, @var{v})

Una función antisimétrica que se utiliza en relaciones de conmutación. La implementación por defecto analiza si los dos argumentos son vectores base mediante  @code{abasep} y en tal caso sustituye el valor correspondiente de la matriz  @code{aform}.

Ejemplo:

@example
(%i1) load(atensor);
(%o1)       /share/tensor/atensor.mac
(%i2) adim:3;
(%o2)                                  3
(%i3) aform:matrix([0,3,-2],[-3,0,1],[2,-1,0]);
                               [  0    3   - 2 ]
                               [               ]
(%o3)                          [ - 3   0    1  ]
                               [               ]
                               [  2   - 1   0  ]
(%i4) asymbol:x;
(%o4)                                  x
(%i5) av(x[1],x[2]);
(%o5)                                 x
                                       3
@end example

@end deffn


@deffn {Función} abasep (@var{v})

Analiza si su argumento es un vector base en @code{atensor}. Esto es, si se trata de un símbolo indexado, siendo el símbolo el mismo que el valor de @code{asymbol} y si el índice tiene un valor numérico entre 1 y @code{adim}.

@end deffn

